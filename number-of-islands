/*
 * Island count

https://leetcode.com/problems/number-of-islands/

Given a 2d grid map of '1's (land) and '0's (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.

Example 1:

Input:
11110
11010
11000
00000

Output: 1
Example 2:

Input:
11000
11000
00100
00011

Output: 3



Questions
   > Need not be square matrix, right ?
   > What to do if i see something that is not 1 or 0. Invalid input exception ?
   > well formed matrix ?

Approach: Scan the matrix and maintain the "seen" state in a matrix. when you see a 1, mark as seen and dfs to all your neighbors.
 */

class Solution {
  public static void main(String[] args) {
    int[][] a = {
      {1,1,0,0,0},
      {1,1,0,0,1},
      {0,0,1,0,1},
      {1,1,1,1,1}
    };

    System.out.println("Count: " + getCount(a));
  }

  static int getCount(int[][] a) {
    boolean seen[][] = new boolean[a.length][a[0].length];  // default to false
    int count = 0;

    for (int i = 0; i < a.length; i++) {
      for (int j = 0; j < a[0].length; j++) {
            System.out.println("--------");

            if (a[i][j] == 0 || seen[i][j]) {
              System.out.println("skipping i=" + i + " j=" + j);
              continue;
            }
            
            System.out.println("Started new island at i=" + i + " j=" + j);
            count++;  // new island
            seen[i][j] = true;
            dfs(i, j, seen, a);
            print(seen);
      }
    }

    return count;
  }

  static void print(boolean seen[][]) {
    System.out.println("post dfs seen state: ");

    for (int i = 0; i < seen.length; i++) {
      for (int j = 0; j < seen[0].length; j++) {
        System.out.print(seen[i][j] + ", ");
      }

      System.out.println("");
    }
  }

  static void dfs(int i, int j, boolean[][] seen, int[][] a) {
    // right 
    if (j + 1 < seen[0].length && a[i][j + 1] == 1  && !seen[i][j+1]) {
      seen[i][j + 1] = true;
      dfs(i, j + 1, seen, a);
    }

    // left
    if (j - 1 >= 0 && a[i][j - 1] == 1 && !seen[i][j-1] ) {
      seen[i][j - 1] = true;
      dfs(i, j - 1, seen, a);
    }


    // down
    if (i + 1 < seen.length && a[i + 1][j] == 1 && !seen[i + 1][j]) {
      seen[i + 1][j] = true;
      dfs(i + 1, j, seen, a);
    }

    // up
    if (i - 1 >= 0 && a[i - 1][j] == 1 && !seen[i - 1][j]) {
      seen[i - 1][j] = true;
      dfs(i - 1, j, seen, a);
    }
  }
}
