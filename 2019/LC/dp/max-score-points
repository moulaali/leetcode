import java.util.*;

/**

Compute the max points based on two rules

1/ choose a value and delte all elements and gain points
2/ also delete n-1 and n+1 and gain no points

Approach:

Compute recursively the possiblities. Remember the subproblem
maximum's in a hashmap so that we don't recompute a solved
subproblem. Basically dynamic programming with memoziation.

*/
public class Solution {

    // memoize so that we don't recompute overlapping subproblems
    static Map<List<Integer>, Integer> memoizeTable = new HashMap<>();
  
    public static void main(String[] args) {
      // Integer[] a = {5, 6, 6, 4, 11};  // 27
      Integer[] a = {1, 2, 1, 3, 2, 3};  // 8
      
      List<Integer> l = new ArrayList<>();
      l.addAll(Arrays.asList(a));
      
      System.out.println("Max: " + computeMax(l));
    }
  
    static int computeMax(List<Integer> list) {
      
      // reuse if computed already
      if (memoizeTable.containsKey(list)) {
        System.out.println("list " + list + "is already computed with max " + 
                          memoizeTable.get(list));
        return memoizeTable.get(list);
      }
      
      int max = 0;
      
      for (Integer chosen : list) {
        // choose a[i] and compute the score
        int score = compute(new ArrayList<>(list), chosen);
        max = Math.max(score, max);
      }
      
      memoizeTable.put(list, max);
      
      return max;
    }
    
    static int compute(List<Integer> list, int chosen) {
      int score = 0;
    
      if (list.isEmpty()) {
        return 0;
      }
      
      ListIterator<Integer> iterator = list.listIterator();
      
      while (iterator.hasNext()) {
        Integer value = iterator.next();
        
        // remove chosen values and add to score
        if (value == chosen) {
          iterator.remove();
          score += value;
          continue;
        }
        
        if ((value == chosen + 1) || (value == chosen - 1)) {
          iterator.remove();
        }
      }
      
      score += computeMax(new ArrayList<>(list));
      
      System.out.println("Score computed after choosing " + chosen + 
                         " and list" + list + " : " + score);
      return score;
    }
}
