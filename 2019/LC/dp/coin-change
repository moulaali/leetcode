import java.util.*;

/**

https://leetcode.com/problems/coin-change/

You are given coins of different denominations and a total amount of money amount. Write a function to compute the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.

Example 1:

Input: coins = [1, 2, 5], amount = 11
Output: 3 
Explanation: 11 = 5 + 5 + 1
Example 2:

Input: coins = [2], amount = 3
Output: -1

*/
class Solution 
{ 
    public static void main (String[] args) throws Exception 
    {
      int[] coins = {2};
      int amount = 6;
      
      System.out.println(" Simple approach " + coinChange(coins, 11));
      
      int[][] dp = new int[coins.length][amount + 1];
      
      // fill up the first line
      for (int j = 0; j <= amount; j++) {
        
        if (j == 0) {
          dp[0][0] = 0;
          continue;
        }
        
        if (j < coins[0]) {
          dp[0][j] = -1; 
          continue;
        }
        
        if (j % coins[0] == 0) {
          dp[0][j] = (j / coins[0]);
          continue;
        }
      }
      
      print(dp);
      
      
      // fill the table
      for (int i = 1; i < dp.length; i++) {
        System.out.println("dealing with coins till " + i);
        
        
        for (int j = 1; j < dp[0].length; j++) {
          
          if (j < coins[i]) {
            dp[i][j] = dp[i - 1][j];
            continue;
          }
          
          // option 1: pick one (or more) of this coin and try to find min coins
          // for j - coins[i]
          Integer dpWithPicking = Integer.MAX_VALUE;
          for (int k = 1; k <= (j / coins[i]); k++) {
            if (j - (k * coins[i]) >= 0 && dp[i] [j - (k * coins[i])] != -1) {
              dpWithPicking = Math.min(dpWithPicking, k + dp[i] [j - coins[i]]);
            } 
          }
          
          // Option 2 : skip the coin and try to find min coins for j 
          Integer dpSkip = Integer.MAX_VALUE;
          if (i - 1 >= 0 && dp[i - 1][j] != -1) {
            dpSkip = dp[i - 1][j];
          }
          
          Integer min = Math.min(dpSkip, dpWithPicking);
          if (min == Integer.MAX_VALUE) {
            min = -1;
          }
          
          dp[i][j] = min;
        }
      }
      
      print(dp);
    }
      
    static void print(int[][] dp) {
      for (int i = 0; i < dp.length; i++) {
        for (int j = 0; j < dp[0].length; j++) {
          System.out.print(((dp[i][j] == -1) ? " " : "  ") + dp[i][j]);
        }
        System.out.println("");
      }
      
      System.out.println("\n\n");
    }
  
  
    static int coinChange(int[] coins, int amount) {
        
        long[] dp = new long[amount+1];
        Arrays.fill(dp, Integer.MAX_VALUE);
        dp[0]=0;
        for(int i=0; i<coins.length; i++){
            for(int amt=1; amt<dp.length; amt++){
                if(amt-coins[i]>=0)
                    dp[amt] = Math.min(dp[amt],dp[amt-coins[i]]+1); 
            }
        } 
        return dp[amount] == Integer.MAX_VALUE ? -1 : (int) dp[amount];
     }
}
