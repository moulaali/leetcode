import java.io.*;
import java.util.*;
import java.util.Map.Entry;
import com.google.common.collect.ImmutableList; 

/**

https://leetcode.com/problems/number-of-islands/

Given a 2d grid map of '1's (land) and '0's (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.

Example 1:

Input:
11110
11010
11000
00000

Output: 1
Example 2:

Input:
11000
11000
00100
00011

Output: 3

*/
class Solution {
  
  public static void main(String[] args) {
    int[][] grid = {
      {1, 1, 0, 0, 0},
      {1, 1, 0, 0, 0},
      {0, 0, 1, 0, 0},
      {0, 0, 0, 1, 1},
    };
    
    // mark all as unvisited
    boolean[][] visited = new boolean[grid.length][grid[0].length];
    for (int i = 0; i < visited.length; i++) {
      for (int j = 0; j < visited[i].length; j++) {
        visited[i][j] = false;
      }
    }
    
    System.out.println("Count " + getIslandCount(grid, visited));
  }
  
  static int getIslandCount(int[][] grid, boolean[][] visited) {
    
    int islands = 0;
    
    for (int i = 0; i < grid.length; i++) {
      for (int j = 0; j < grid[i].length; j++) {
    
        // skip water or visited lands
        if (grid[i][j] == 0 || visited[i][j]) {
          continue;
        }
        
        System.out.println(String.format("%d,%d is start of new island. ", i, j));
        islands++;
        dfs(grid, visited, i, j);
      }
    }
    
    return islands;
  }
  
  // Dfs walk and mark unvisited neighbors
  static void dfs(int[][] grid, boolean[][] visited, int i, int j) {
    
    visited[i][j] = true;
    
    // find neighbors and dfs visit them
    
    // right
    if (j + 1 < grid[i].length && grid[i][j + 1] == 1 && !visited[i][j + 1]) {
      System.out.println(String.format("Adding (%d,%d) to walk. ", i, j + 1));
      dfs(grid, visited, i, j + 1);
    }
    
    // left
    if (j - 1 >= 0 && grid[i][j - 1] == 1 && !visited[i][j - 1]) {
      System.out.println(String.format("Adding (%d,%d) to walk. ", i, j - 1));
      dfs(grid, visited, i, j - 1);
    }
    
    // top
    if (i - 1 >= 0 && grid[i - 1][j] == 1 && !visited[i - 1][j]) {
      System.out.println(String.format("Adding (%d,%d) to walk. ", i - 1, j));
      dfs(grid, visited, i - 1, j);
    }
    
    // bottom
    if (i + 1 < grid.length && grid[i + 1][j] == 1 && !visited[i + 1][j]) {
      System.out.println(String.format("Adding (%d,%d) to walk. ", i + 1, j));
      dfs(grid, visited, i + 1, j);
    }
    
    return;
  }
}
