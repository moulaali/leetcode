import java.util.*;

/**
Given a non-empty string s and a dictionary wordDict containing a list of non-empty words, determine if s can be segmented into a space-separated sequence of one or more dictionary words.

Note:

The same word in the dictionary may be reused multiple times in the segmentation.
You may assume the dictionary does not contain duplicate words.
Example 1:

Input: s = "leetcode", wordDict = ["leet", "code"]
Output: true
Explanation: Return true because "leetcode" can be segmented as "leet code".
Example 2:

Input: s = "applepenapple", wordDict = ["apple", "pen"]
Output: true
Explanation: Return true because "applepenapple" can be segmented as "apple pen apple".
             Note that you are allowed to reuse a dictionary word.
Example 3:

Input: s = "catsandog", wordDict = ["cats", "dog", "sand", "and", "cat"]
Output: false

Approach

This is same as jump game. start from index i, all the valid jumps are the ones
that are in dictionary. The goal is to see if we can jump from start to end.

Add the jumps to queue. keep removing and see if we can jump farther (or end).
*/
public class Solution {
  public static void main(String[] args) {
    List<String> words = List.of(
      "cats",
      "dog",
      "sand",
      "and",
      "cat");
    String s = "catsanddog";
    
    Queue<Integer> q = new LinkedList<>();
    q.add(0);
    
    boolean[] visited = new boolean[s.length()];
    for (int i = 0; i < s.length(); i++) {
      visited[i] = false;
    }
   
    while (!q.isEmpty()) {
      int index = q.remove();
      
      if (index == s.length()) {
            System.out.println("Reached end");
            break;
      }
      
      for (int i = index; i < s.length(); i++) {
        if (words.contains(s.substring(index, i + 1))) {
          System.out.println("Adding " + s.substring(index, i + 1) + " to queue");
          q.add(i + 1);
        }
      }
    }
  }
}
