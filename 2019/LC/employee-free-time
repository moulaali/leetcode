import java.io.*;
import java.util.*;
import java.util.Map.Entry;
import com.google.common.collect.ImmutableList;

/**
*
*
*
* https://leetcode.com/problems/employee-free-time
*
*
We are given a list schedule of employees, which represents the working time for each employee.

Each employee has a list of non-overlapping Intervals, and these intervals are in sorted order.

Return the list of finite intervals representing common, positive-length free time for all employees, also in sorted order.

Example 1:

Input: schedule = [[[1,2],[5,6]],[[1,3]],[[4,10]]]
Output: [[3,4]]
Explanation:
There are a total of three employees, and all common
free time intervals would be [-inf, 1], [3, 4], [10, inf].
We discard any intervals that contain inf as they aren't finite.


Example 2:

Input: schedule = [[[1,3],[6,7]],[[2,4]],[[2,5],[9,12]]]
Output: [[5,6],[7,9]]


(Even though we are representing Intervals in the form [x, y], the objects inside are Intervals, not lists or arrays. For example, schedule[0][0].start = 1, schedule[0][0].end = 2, and schedule[0][0][0] is not defined.)

Also, we wouldn't include intervals like [5, 5] in our answer, as they have zero length.

Note:

schedule and schedule[i] are lists with lengths in range [1, 50].
0 <= schedule[i].start < schedule[i].end <= 10^8.
NOTE: input types have been changed on June 17, 2019. Please reset to default code definition to get new method signature.
*
*
*
* Approach :  Find the free intervals (opposite of work intervals) and find interval intersection.
*             Interval intersection can be done in O(n) time by checking one of six cases and moving the corresponding set
*
*/
class Solution {

  static int[][][] input = {
      {{1, 2},{5, 6}},
      {{1, 3}},
      {{4,10}}
  };  // 3-4


 /** static int[][][] input = {
    {{1, 3},{6, 7}},
    {{2, 4}},
    {{2,5}, {9,12}}
  }; */  // [5,6],[7,9]]

  static int min;
  static int max;

  public static void main(String[] args) {

    int n = input.length;
    setRange();

    int[][] common = getFreeIntervals(0);

    for (int i = 1; i < n; i++) {
      int[][] freeIntervals = getFreeIntervals(i);
      common = getIntersection(common, freeIntervals);
    }

    System.out.println("Common free intervals: " + Arrays.deepToString(common));
 }

 static int[][] getFreeIntervals(int empIndex) {
    int prevEnd = min;
    int numIntervals = input[empIndex].length;
    int[][] free = new int[10][2];

    int k = 0;
    for (int i = 0; i < numIntervals; i++) {
      int start = input[empIndex][i][0];
      int end = input[empIndex][i][1];

      if ((start - prevEnd) > 0) {
        free[k][0] = prevEnd;
        free[k][1] = start;
        k++;
      }

      prevEnd = end;
    }

    // Add last free interval
    if ((max - prevEnd) > 0) {
      free[k][0] = prevEnd;
      free[k][1] = max;
      k++;
    }

    free = Arrays.copyOf(free, k);

    System.out.println("Free intervals for empIndex " + 
        empIndex + ": " + Arrays.deepToString(free));
    return free;
 }

 static void setRange() {
    int n = input.length;
    min = Integer.MAX_VALUE;
    max = Integer.MIN_VALUE;
    
    for (int i = 0; i < n; i++) {
    if (input[i][0][0] < min) {
      min = input[i][0][0];
    }

    int last = input[i].length;
    if (input[i][last-1][1] > max) {
      max = input[i][last-1][1];
    }

   }

   System.out.println("Schedule range : " + min +  "-" + max);
 }

 static int[][] getIntersection(int[][] intervals1, int[][] intervals2) {
    int[][] inter = new int[10][2];
    int k = 0;
    int i = 0;
    int j = 0;

    System.out.println("\n\nFinding intersection between: " + Arrays.deepToString(intervals1) + Arrays.deepToString(intervals2));

    while (i < intervals1.length && j < intervals2.length) {
      System.out.printf("\nChecking [%d-%d] and [%d-%d] \n",
                        intervals1[i][0], intervals1[i][1], intervals2[j][0], intervals2[j][1]);

      int[] first = intervals1[i];
      int[] second = intervals2[j];

      // case1:
      // |----|
      //         |-----|
      // s2 > e1
      if (second[0] > first[1]) {
          System.out.println("(case1) s2 > e1 : no overlap : moving first set");
          i++;
          continue;
      }

      // case 2:
      //            |------|
      //  |------|
      // s1 > e2
      //
      if (first[0] > second[1]) {
          System.out.println("(case2) s1 > e2 : no overlap : moving second set");
          j++;
          continue;
      }

      // case 3:
      // overlap
      //    |---------------|
      //          |----------------|
      // s2 > s1 && e2 > e1
      //
      if (second[0] > first[0]
          && second[1] > first[1]) {
          System.out.printf("(case3) s2 > s1 and e2 > e1: overlap : moving first set and added [%d-%d]\n",
                            second[0], first[1]);
          inter[k][0] = second[0];
          inter[k][1] = first[1];

          k++;
          i++;
          continue;
      }


      // case 4:
      // overlap
      //                |---------------|
      //          |----------------|
      // s1 > s2 && e1 > e2
      //
      if (first[0] > second[0]
          && first[1] > second[1]) {
          System.out.printf("(case4) s1 > s2 and e1 > e2: overlap : moving second set and added [%d-%d]\n",
                            first[0], second[1]);
          inter[k][0] = first[0];
          inter[k][1] = second[1];

          k++;
          j++;
          continue;
      }


      //
      // case 5: total overlap
      // |----------------|
      //     |------|
      //
      // s2 > s1 and e1 > e2
      //
      if (second[0] >= first[0]
          && first[1] >= second[1]) {
          System.out.printf("(case5) s2 > s1 and e1 > e2: total overlap : moving second set and added [%d-%d]\n",
                            second[0], second[1]);
          inter[k][0] = second[0];
          inter[k][1] = second[1];

          k++;
          j++;
          continue;
      }

      //
      // case 6: total overlap
      //    |------|
      // |----------------|
      //
      //
      // s1 > s2 and e2 > e1
      //
      if (first[0] >= second[0]
          && second[1] >= first[1]) {
          System.out.printf("(case6) s1 > s2 and e2 > e1: total overlap : moving first set and added [%d-%d]\n",
                            first[0], first[1]);
          inter[k][0] = first[0];
          inter[k][1] = first[1];

          k++;
          i++;
          continue;
      }
    }

    inter = Arrays.copyOf(inter, k);

    System.out.println("Intersection : \n" + Arrays.deepToString(inter));

    return inter;
 }
}