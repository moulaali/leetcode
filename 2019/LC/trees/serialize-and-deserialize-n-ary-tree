import java.io.*;
import java.util.*; 

/**
https://leetcode.com/problems/serialize-and-deserialize-n-ary-tree/

Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.

Design an algorithm to serialize and deserialize an N-ary tree. An N-ary tree is a rooted tree in which each node has no more than N children. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that an N-ary tree can be serialized to a string and this string can be deserialized to the original tree structure.

For example, you may serialize the following 3-ary tree

as [1 [3[5 6] 2 4]]. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.

Note:

N is in the range of [1, 1000]
Do not use class member/global/static variables to store states. Your serialize and deserialize algorithms should be stateless.


Approach :

serialization : (data, serialize(child1), serialize(child2)....)
deserialization : if '(', call serialize in substring. if digit, create a node and add a child.

*/
class Solution {
  
  static int pos = 0;

  public static void main(String[] args) {
    Node root = new Node(1);
    
    Node three = new Node(3);
    three.addChild(5);
    three.addChild(6);
    
    root.addChild(three);
    root.addChild(2);
    root.addChild(4);
    
    String serialized = serialize(root);
    System.out.println("serialized: " + serialized);
    Node deserialized = deserialize(serialized);
    System.out.println("serialized: " + serialize(deserialized));
  }
  
  static Node deserialize(String serialized) {
    
    System.out.println("Deserialzing substring " + serialized.substring(pos));
    
    Node n = null;
    
    while (pos < serialized.length()) {
      Character c = serialized.charAt(pos);
      
      if (Character.isDigit(c)) {
        n = new Node(Character.getNumericValue(c));
        pos++;
      }
      
      if (c == '(') {
        // create subtree
        pos++;
        Node subtree = deserialize(serialized);
        if (n != null) {
          n.addChild(subtree);
        } else {
          return subtree;
        }
      }
      
      if (c == ')') {
        pos++;
        return n;
      }
      
      if (c == ',') {
        pos++;
      }
    }
    
    return n;
  }
  
  static String serialize(Node n) {
    StringBuilder sb = new StringBuilder();
    
    serialize(n, sb);
    return sb.toString();
  }
  
  static void serialize(Node n, StringBuilder sb) {
    sb.append("(");
    sb.append(n.value);
    for (Node child : n.children) {
      sb.append(",");
      serialize(child, sb);
    }
    sb.append(")");
  }
 
  static class Node {
    int value;
    List<Node> children;
    
    Node(int value) {
      this.value = value;
      children = new ArrayList<>();
    }
    
    void addChild(Node n) {
      this.children.add(n);
    }
    
    void addChild(int value) {
      Node child = new Node(value);
      this.children.add(child);
    }
  }
}
