import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;
import java.util.function.Function;
import java.util.stream.Collectors;


/**
 * Trie Demo program
 */
public class TrieDemo {

    public static void main(String[] args) {
        Trie trie = new Trie();
        
        trie.add("hello");
        trie.add("hi");
        trie.add("bat");
        trie.add("batsman");
        trie.add("hieee");
        
        trie.print();
        
        System.out.println("Looking for hi: " + (trie.find("hi") ? "found" : "not found"));
        System.out.println("Looking for hel: " + (trie.find("hel") ? "found" : "not found"));
        System.out.println("Looking for hieee: " + (trie.find("hieee") ? "found" : "not found"));
        System.out.println("Looking for hit: " + (trie.find("hit") ? "found" : "not found"));
        System.out.println("Looking for foo: " + (trie.find("foo") ? "found" : "not found"));
        System.out.println("Looking for prefix search " + tried.prefixSearch("ba"));
    }
    
    private static class Trie {
        
        Node root = null;
        
        Trie() {
            root = Node.createRootNode();
        }
        
        void add(String word) {
            Node currentNode = root;
            
            for (int i = 0; i < word.length(); i++) {
                Character currentChar = word.charAt(i);
                Node matchingChild =  currentNode.getChild(currentChar);
                if (matchingChild != null) {
                    currentNode = matchingChild;
                } else {
                    // No match. Add the new char
                    currentNode = currentNode.addChild(currentChar);
                }
            }
            currentNode.isEow = true;
        }
        
        boolean find(String word) {
            Node currentNode = root;
            
            for (int i = 0; i < word.length(); i++) {
                Character currentChar = word.charAt(i);
                Node matchingChild =  currentNode.getChild(currentChar);
                if (matchingChild != null) {
                    currentNode = matchingChild;
                } else {
                    return false;
                }
            }
            return currentNode.isEow;
        }
        
        void print() {
            List<Character> currentPrefix = new ArrayList<>();
            for (Node child : root.children) {
                print(child, currentPrefix);
            }
        }
        
        private void print(Node node, List<Character> currentPrefix) {
            // New word; print
            if (node.isEow) {
                for (Character c : currentPrefix) {
                    System.out.print(c);
                }
                System.out.println(node.c);
            }
            
            for (Node child : node.children) {
                currentPrefix.add(node.c);
                print(child, currentPrefix);
                currentPrefix.remove(node.c);
            }
        }
        
        
        private static class Node {
            Character c;
            Set<Node> children;
            boolean isEow; // Termnial/End-of-Word node
        
            static Node createRootNode() {
                return new Node(Character.MIN_VALUE);
            }   
            
            Node(Character c) {
                this.c = c;
                children = new HashSet<>();
                this.isEow = false;
            }
            
            Node addChild(Character c) {
                Node n = new Node(c);
                children.add(n);
                return n;
            }
            
            void removeChild(Node child) {
                children.remove(child);
            }
            
            Node getChild(Character ch) {
                // TODO(moulaali): Optimize this with equals
                for (Node child : children) {
                    if (child.c == ch) {
                        return child;
                    }
                }
                
                return null;
            }
        }
    }
}
