import java.util.*;

/**

https://leetcode.com/problems/combination-sum/

Given a set of candidate numbers (candidates) (without duplicates) and a target number (target), find all unique combinations in candidates where the candidate numbers sums to target.

The same repeated number may be chosen from candidates unlimited number of times.

Note:

All numbers (including target) will be positive integers.
The solution set must not contain duplicate combinations.
Example 1:

Input: candidates = [2,3,6,7], target = 7,
A solution set is:
[
  [7],
  [2,2,3]
]
Example 2:

Input: candidates = [2,3,5], target = 8,
A solution set is:
[
  [2,2,2,2],
  [2,3,3],
  [3,5]
]

Approach: Recursively call find() with a target of (target - element). Remember to include the element 
itself so that we can have repetitve elements

*/
public class Solution {
  public static void main(String[] args) {
    int[] a = {2,3,5};
    int target = 8;
    
    Set<List<Integer>> combinations = new HashSet<>();
    List<Integer> current = new ArrayList<>();
    
    findCombos(a, target, current, combinations, 0);
    
    System.out.println("Combinations : " + combinations);
  }
  
  static void findCombos(int[] a, int target, List<Integer> current, Set<List<Integer>> combos, int currentIndex) {
    
    if (target == 0) {
      // Add everything in current to solution
      System.out.println("Found a new combo " + current);
      combos.add(new ArrayList<>(current));
      return;
    }
    
    for (int i = currentIndex; i < a.length; i++) {
      
      if (a[i] > target) {
        continue;
      }
      
      current.add(a[i]);
      findCombos(a, target - a[i], current, combos, i);
      current.remove((Integer) a[i]);
    }
  }
}



