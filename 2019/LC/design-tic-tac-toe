import java.util.*;

/**

https://leetcode.com/problems/design-tic-tac-toe/

Design a Tic-tac-toe game that is played between two players on a n x n grid.

You may assume the following rules:

A move is guaranteed to be valid and is placed on an empty block.
Once a winning condition is reached, no more moves is allowed.
A player who succeeds in placing n of their marks in a horizontal, vertical, or diagonal row wins the game.

Approach:

Simple approach is to have 0s and 1s to represent X and O. 
If the board is huge, we need to do O(n) checks to check the
row or col of the last move's row, col and diagonal.

Better approach is to use rowSum[n], colSum[n], diagonal and anti-diagonal.
for every move, increment +1 or decrement -1 for X or O in that row.
if abs(sum) becomes 3 in that row[last_i] and col[last_j] or diagonal
or anti-diagonal, then we have a winner i.e. the player making the move.

*/
class Solution 
{ 
    public static void main (String[] args) throws Exception 
    {
      TicTacToe toe = new TicTacToe(3);

      /**
        toe.move(0, 0, 1); -> Returns 0 (no one wins)
        |X| | |
        | | | |    // Player 1 makes a move at (0, 0).
        | | | |

        toe.move(0, 2, 2); -> Returns 0 (no one wins)
        |X| |O|
        | | | |    // Player 2 makes a move at (0, 2).
        | | | |

        toe.move(2, 2, 1); -> Returns 0 (no one wins)
        |X| |O|
        | | | |    // Player 1 makes a move at (2, 2).
        | | |X|

        toe.move(1, 1, 2); -> Returns 0 (no one wins)
        |X| |O|
        | |O| |    // Player 2 makes a move at (1, 1).
        | | |X|

        toe.move(2, 0, 1); -> Returns 0 (no one wins)
        |X| |O|
        | |O| |    // Player 1 makes a move at (2, 0).
        |X| |X|

        toe.move(1, 0, 2); -> Returns 0 (no one wins)
        |X| |O|
        |O|O| |    // Player 2 makes a move at (1, 0).
        |X| |X|

        toe.move(2, 1, 1); -> Returns 1 (player 1 wins)
        |X| |O|
        |O|O| |    // Player 1 makes a move at (2, 1).
        |X|X|X|
      */
      System.out.println(toe.move(0, 0, 1)); 
      System.out.println(toe.move(0, 2, 2)); 
      System.out.println(toe.move(2, 2, 1)); 
      System.out.println(toe.move(1, 1, 2)); 
      System.out.println(toe.move(2, 0, 1)); 
      System.out.println(toe.move(1, 0, 2));
      System.out.println(toe.move(2, 1, 1));
    } 
}

class TicTacToe {
  private int[] rows;
  private int[] cols;
  private int diagonal;
  private int antiDiagonal;

  /** Initialize your data structure here. */
  public TicTacToe(int n) {
      rows = new int[n];
      cols = new int[n];
  }

  /** Player {player} makes a move at ({row}, {col}).
      @param row The row of the board.
      @param col The column of the board.
      @param player The player, can be either 1 or 2.
      @return The current winning condition, can be either:
              0: No one wins.
              1: Player 1 wins.
              2: Player 2 wins. */
  public int move(int row, int col, int player) {
      int toAdd = player == 1 ? 1 : -1;

      rows[row] += toAdd;
      cols[col] += toAdd;
      if (row == col)
      {
          diagonal += toAdd;
      }

      if (col == (cols.length - row - 1))
      {
          antiDiagonal += toAdd;
      }

      int size = rows.length;
      if (Math.abs(rows[row]) == size ||
          Math.abs(cols[col]) == size ||
          Math.abs(diagonal) == size  ||
          Math.abs(antiDiagonal) == size)
      {
          return player;
      }

      return 0;
  }
}
