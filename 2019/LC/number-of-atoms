import java.io.*;
import java.util.*;
import java.util.Map.Entry;
import com.google.common.collect.ImmutableList; 

/**

https://leetcode.com/problems/number-of-atoms/

Given a chemical formula (given as a string), return the count of each atom.

An atomic element always starts with an uppercase character, then zero or more lowercase letters, representing the name.

1 or more digits representing the count of that element may follow if the count is greater than 1. If the count is 1, no digits will follow. For example, H2O and H2O2 are possible, but H1O2 is impossible.

Two formulas concatenated together produce another formula. For example, H2O2He3Mg4 is also a formula.

A formula placed in parentheses, and a count (optionally added) is also a formula. For example, (H2O2) and (H2O2)3 are formulas.

Given a formula, output the count of all elements as a string in the following form: the first name (in sorted order), followed by its count (if that count is more than 1), followed by the second name (in sorted order), followed by its count (if that count is more than 1), and so on.

Example 1:

Input: 
formula = "H2O"
Output: "H2O"
Explanation: 
The count of elements are {'H': 2, 'O': 1}.

Example 2:

Input: 
formula = "Mg(OH)2"
Output: "H2MgO2"
Explanation: 
The count of elements are {'H': 2, 'Mg': 1, 'O': 2}.

Example 3:

Input: 
formula = "K4(ON(SO3)2)2"
Output: "K4N2O14S4"
Explanation: 
The count of elements are {'K': 4, 'N': 2, 'O': 14, 'S': 4}.

*/
class Solution {
  
  static int pos = 0;
  
  public static void main(String[] args) {
    String input = "Mg(OH)2";
    
    printFormula(tokenize(input));
  }
  
  static Map<String, Integer> tokenize(String input) {
    StringBuilder tokenBuilder = new StringBuilder();
    Map<String, Integer> tokensMap = new TreeMap<>();

    System.out.println("Tokenizing " + input + " scan position " + input.substring(pos));
    
    int digit = 1;
    for (;pos < input.length();) {
      
      Character c = input.charAt(pos);
      
      // Collect a sub-formula frequency till we hit ')'
      if (c == '(') {
        addToBuilder(tokenBuilder, digit, tokensMap);
        pos++;
        Map<String, Integer> subTokens = tokenize(input);
        mergeMaps(tokensMap, subTokens);
      }
      
      if (c == ')') {
        // Sub formula ended, add all tokens and also multiply by digit (if needed)
        addToBuilder(tokenBuilder, digit, tokensMap);
        pos++;
        
        if (pos < input.length()
            && Character.isDigit(input.charAt(pos))) {
          digit = Character.getNumericValue(input.charAt(pos));
          multipleTokensBy(tokensMap, digit);
          pos++;
        }
        
        return tokensMap;
      }
      
      // New token started
      if (Character.isUpperCase(c)) {
        addToBuilder(tokenBuilder, digit, tokensMap);
        
        tokenBuilder = new StringBuilder();
        tokenBuilder.append(c);
        digit = 1;
        pos++;
      }
      
      // Digit add
      if (Character.isDigit(c)) {
        digit = Character.getNumericValue(c);
        pos++;
      }
      
      // if lower case, continue adding
      if (Character.isLowerCase(c)) {
        tokenBuilder.append(c);
        pos++;
      }
    }

    addToBuilder(tokenBuilder, digit, tokensMap);  
    return tokensMap; 
  }
  
  static void multipleTokensBy(Map<String, Integer> tokensMap, int factor) {
    System.out.println("Multiplying tokensMap by " + tokensMap + " " + factor);
    for (Entry<String, Integer> e : tokensMap.entrySet()) {
      tokensMap.put(e.getKey(), e.getValue() * factor);
    }
  }
  
    static void mergeMaps(Map<String, Integer> dest, Map<String, Integer> src) {
    System.out.println("Merging maps " + dest + " " + src);
    for (Entry<String, Integer> e : src.entrySet()) {
      dest.put(e.getKey(), dest.getOrDefault(e.getKey(), 0) + e.getValue());
    }
  }
  
  static void addToBuilder(StringBuilder tokenBuilder, 
                           int digit, Map<String, Integer> tokensMap) {
    if (!tokenBuilder.toString().isEmpty()) {
      System.out.println("Added a new token " 
                             + tokenBuilder.toString());
      tokensMap.put(tokenBuilder.toString(), digit);      
    }
  }
  
  static void printFormula(Map<String, Integer> tokensMap) {
    for (Entry<String, Integer> e : tokensMap.entrySet()) {
      System.out.print(e.getKey() + "" + ((e.getValue() == 1) ? "" : e.getValue()));
    }
    System.out.println("");
  }
}

