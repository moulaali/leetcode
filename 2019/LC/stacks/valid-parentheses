/**
 * https://leetcode.com/problems/valid-parentheses/
 * 
 * Validate Paranthesis
 
   Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

   An input string is valid if:

   Open brackets must be closed by the same type of brackets.
   Open brackets must be closed in the correct order.
   Note that an empty string is also considered valid.

   Example 1:

   Input: "()"
   Output: true
   Example 2:

   Input: "()[]{}"
   Output: true
   Example 3:

   Input: "(]"
   Output: false
   Example 4:

   Input: "([)]"
   Output: false
   Example 5:

   Input: "{[]}"
   Output: true

 
 */
import java.util.*;

class ValidateParathesis {
 
    public static void main(String[] args)  {
        String input = "[{()}]{";
        Stack<Character> stack = new Stack<Character>();
        Map<Character, Character> match = new HashMap<>();
        match.put('{', '}');
        match.put('(', ')');
        match.put('[', ']');
        boolean valid = true;
        
        for (int i = 0; i < input.length(); i++) {
            Character c = input.charAt(i);
            if (c == '{' || c == '[' || c == '(') {
                  stack.push(c);
              } else if (c == '}' || c == ']' || c == ')') {
                  if (!match.get(stack.pop()).equals(c)) {
                    valid = false;
                  }
              } else {
                System.out.println("Invalid char found " + c);   
                valid = false;
              }
        }
        
        if (!stack.isEmpty()) {
            System.out.println("Stack is not empty. Additional chars: " + stack.pop());
            valid = false;
        }
     
        System.out.println("valid: " + valid);
    }
}
