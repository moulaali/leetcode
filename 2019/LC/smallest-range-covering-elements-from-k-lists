import java.io.*;
import java.util.*;
import java.util.Map.Entry;
import com.google.common.collect.ImmutableList; 

/**

https://leetcode.com/problems/smallest-range-covering-elements-from-k-lists/

Input: [[4,10,15,24,26], [0,9,12,20], [5,18,22,30]]
Output: [20,24]

Explanation: 

List 1: [4, 10, 15, 24,26], 24 is in range [20,24].
List 2: [0, 9, 12, 20], 20 is in range [20,24].
List 3: [5, 18, 22, 30], 22 is in range [20,24].

Input:
K = 3
arr1[] : [4, 7, 9, 12, 15]
arr2[] : [0, 8, 10, 14, 20]
arr3[] : [6, 12, 16, 30, 50]
Output:
The smallest range is [6 8] 

Approach:

1/ Start with a simple range: min and max of elements at index 0
2/ we cannot reduce the range by moving the max, since you we will
fall out of range. only way is to move the minimum forward.
3/ we store all the mins of k lists in heap and move that list forward.
4/ we dont need max heap, we just need compare and swap the maxs

*/
class Solution {
  
  public static void main(String[] args) throws Exception {

   int [][] lists = new int[][] {
     {4,10,15,24,26},
     {0,9,12,20},
     {5,18,22,30}
    }; // 20-24
    
    PriorityQueue<HeapObj> minHeap = 
      new PriorityQueue<>(new Comparator<HeapObj>() {
        public int compare(HeapObj o1, HeapObj o2) {
          return o1.value - o2.value;
        }  
      });
    
    int max = Integer.MIN_VALUE;
    for (int i = 0; i < lists.length; i++) {
      minHeap.offer(new HeapObj(lists[i][0], i, 0));
      
      if (lists[i][0] > max) {
        max = lists[i][0];
      }
    }
    
    System.out.println("Min and Max elements at 0 index: " 
                       + minHeap.peek().value + " " + max);
    
    int rangeMin = 0;
    int rangeMax = Integer.MAX_VALUE;
    
    while (true) {
      HeapObj min = minHeap.poll();
      
      System.out.println("Considering min and max " + min.value + " "
                        + max);
      
      if ((max - min.value) < (rangeMax - rangeMin)) {
        System.out.println("New global smaller range: [" 
                           + min.value + "-" +  max + " ]"
                          + " for list " + min.list 
                          + " for index " + min.index); 
        rangeMin = min.value;
        rangeMax = max;
      }
      
      if (lists[min.list].length <= min.index + 1) {
          System.out.println("One of the list is exhausted: " + min.list);
          break;
      }
        
      minHeap.offer(new HeapObj(
        lists[min.list][min.index + 1],
        min.list,
        min.index + 1));
  
      max = Math.max(max, lists[min.list][min.index + 1]);
      System.out.println("Moved and added next item in list " 
                         + min.list + " " 
                         + lists[min.list][min.index + 1]);
    }
    
    System.out.println("Min Range: " + rangeMin + " " + rangeMax);
  }
  
  static class HeapObj {
    int value;
    int list;
    int index;
    
    HeapObj(int value, int list, int index) {
      this.value = value;
      this.list = list;
      this.index = index;
    }
  }
}

